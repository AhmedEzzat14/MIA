
Task10.2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000214  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000244  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008e1  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000077e  00000000  00000000  00000bcd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003cd  00000000  00000000  0000134b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c8  00000000  00000000  00001718  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000042e  00000000  00000000  000017e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000f0  00000000  00000000  00001c0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00001cfe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 a5 00 	call	0x14a	; 0x14a <main>
  88:	0c 94 ce 00 	jmp	0x19c	; 0x19c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <adc>:
  * @brief   Function for make PWM duty
  * @param   duty
  * @retval  void
  */
void pwm_Duty(uint8_t duty){
	OCR0A = duty;
  90:	80 e4       	ldi	r24, 0x40	; 64
  92:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
  96:	86 e8       	ldi	r24, 0x86	; 134
  98:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
  9c:	08 95       	ret

0000009e <adc_Read>:
  9e:	ec e7       	ldi	r30, 0x7C	; 124
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	90 81       	ld	r25, Z
  a4:	90 7f       	andi	r25, 0xF0	; 240
  a6:	90 83       	st	Z, r25
  a8:	90 81       	ld	r25, Z
  aa:	89 2b       	or	r24, r25
  ac:	80 83       	st	Z, r24
  ae:	ea e7       	ldi	r30, 0x7A	; 122
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	80 64       	ori	r24, 0x40	; 64
  b6:	80 83       	st	Z, r24
  b8:	80 81       	ld	r24, Z
  ba:	86 fd       	sbrc	r24, 6
  bc:	fd cf       	rjmp	.-6      	; 0xb8 <adc_Read+0x1a>
  be:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
  c2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
  c6:	08 95       	ret

000000c8 <pwm>:
  c8:	83 ea       	ldi	r24, 0xA3	; 163
  ca:	84 bd       	out	0x24, r24	; 36
  cc:	82 e0       	ldi	r24, 0x02	; 2
  ce:	85 bd       	out	0x25, r24	; 37
  d0:	56 9a       	sbi	0x0a, 6	; 10
  d2:	08 95       	ret

000000d4 <Encoder>:
  * @brief   Function for initialize encoder
  * @param   ------
  * @retval  void
  */
void Encoder(){
	EICRA = (1 << ISC00);    // Generates an interrupt request
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
	EIMSK = (1 << INT0);    // Enable INT0
  da:	8d bb       	out	0x1d, r24	; 29
	sei();				   // Enable global interrupt
  dc:	78 94       	sei
  de:	08 95       	ret

000000e0 <__vector_1>:
/**
  * @brief   Function for external interrupt service routine for encode
  * @param   ------
  * @retval  void
  */
ISR(INT0_vect){
  e0:	1f 92       	push	r1
  e2:	0f 92       	push	r0
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	0f 92       	push	r0
  e8:	11 24       	eor	r1, r1
  ea:	8f 93       	push	r24
  ec:	9f 93       	push	r25
	Encoder_Count++;
  ee:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Encoder_Count>
  f2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <Encoder_Count+0x1>
  f6:	01 96       	adiw	r24, 0x01	; 1
  f8:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <Encoder_Count+0x1>
  fc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <Encoder_Count>
}
 100:	9f 91       	pop	r25
 102:	8f 91       	pop	r24
 104:	0f 90       	pop	r0
 106:	0f be       	out	0x3f, r0	; 63
 108:	0f 90       	pop	r0
 10a:	1f 90       	pop	r1
 10c:	18 95       	reti

0000010e <RPM_Calculation>:
  * @brief   Function for Calculating speed
  * @param   ------
  * @retval  void
  */
void RPM_Calculation(){
	Motor_Speed = (Encoder_Count * 60);   // One pulse per revolution
 10e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <Encoder_Count>
 112:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <Encoder_Count+0x1>
 116:	4c e3       	ldi	r20, 0x3C	; 60
 118:	42 9f       	mul	r20, r18
 11a:	c0 01       	movw	r24, r0
 11c:	43 9f       	mul	r20, r19
 11e:	90 0d       	add	r25, r0
 120:	11 24       	eor	r1, r1
 122:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 126:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	Encoder_Count = 0;                   // Reset Encoder Counter
 12a:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <Encoder_Count+0x1>
 12e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <Encoder_Count>
 132:	08 95       	ret

00000134 <SPI>:
  * @brief   Function for initialize SPI
  * @param   ------
  * @retval  void
  */
void SPI(){
	DDRB = (1 << SS) | (1 << MOSI) | (1 << SCK);      // Make MOSI, SCK ,SS as output
 134:	8c e2       	ldi	r24, 0x2C	; 44
 136:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1 << MISO);                            // Make MISO as input
 138:	24 98       	cbi	0x04, 4	; 4
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0);  // Enable SPI, Master mode and FOSC/16
 13a:	81 e5       	ldi	r24, 0x51	; 81
 13c:	8c bd       	out	0x2c, r24	; 44
 13e:	08 95       	ret

00000140 <SPI_Data>:
  * @brief   Function for initialize SPI
  * @param   uint8_t data that will be sen
  * @retval  void
  */
void SPI_Data(uint8_t data){
	SPDR = data;
 140:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1 << SPIF)));  // Wait for transmission complete
 142:	0d b4       	in	r0, 0x2d	; 45
 144:	07 fe       	sbrs	r0, 7
 146:	fd cf       	rjmp	.-6      	; 0x142 <SPI_Data+0x2>
}
 148:	08 95       	ret

0000014a <main>:


int main(void)
{
	adc();
 14a:	0e 94 48 00 	call	0x90	; 0x90 <adc>
	pwm();
 14e:	0e 94 64 00 	call	0xc8	; 0xc8 <pwm>
	Encoder();
 152:	0e 94 6a 00 	call	0xd4	; 0xd4 <Encoder>
	SPI();
 156:	0e 94 9a 00 	call	0x134	; 0x134 <SPI>
	
    while (1) 
    {	 
		uint16_t Potentiometer_value = adc_Read(SPEED_CONTROL_POT);		 // Read the potentiometer value
 15a:	82 e0       	ldi	r24, 0x02	; 2
 15c:	0e 94 4f 00 	call	0x9e	; 0x9e <adc_Read>
		uint8_t PWM_duty_read = Potentiometer_value / 4;			    // Scale 10-bit ADC value to 8-bit PWM
 160:	96 95       	lsr	r25
 162:	87 95       	ror	r24
 164:	96 95       	lsr	r25
 166:	87 95       	ror	r24
  * @brief   Function for make PWM duty
  * @param   duty
  * @retval  void
  */
void pwm_Duty(uint8_t duty){
	OCR0A = duty;
 168:	87 bd       	out	0x27, r24	; 39
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16a:	2f e3       	ldi	r18, 0x3F	; 63
 16c:	8d e0       	ldi	r24, 0x0D	; 13
 16e:	93 e0       	ldi	r25, 0x03	; 3
 170:	21 50       	subi	r18, 0x01	; 1
 172:	80 40       	sbci	r24, 0x00	; 0
 174:	90 40       	sbci	r25, 0x00	; 0
 176:	e1 f7       	brne	.-8      	; 0x170 <main+0x26>
 178:	00 c0       	rjmp	.+0      	; 0x17a <main+0x30>
 17a:	00 00       	nop
		
		
		pwm_Duty(PWM_duty_read);								     // Set PWM duty cycle based on potentiometer
		
		_delay_ms(1000);										   // Wait for 1 second		          
		RPM_Calculation();
 17c:	0e 94 87 00 	call	0x10e	; 0x10e <RPM_Calculation>
		
		SPI_Data(Motor_Speed >> 8);								// Send high value
 180:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 184:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 188:	89 2f       	mov	r24, r25
 18a:	0e 94 a0 00 	call	0x140	; 0x140 <SPI_Data>
		SPI_Data(Motor_Speed & 0xFF);						   // Send low value
 18e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 192:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 196:	0e 94 a0 00 	call	0x140	; 0x140 <SPI_Data>
 19a:	df cf       	rjmp	.-66     	; 0x15a <main+0x10>

0000019c <_exit>:
 19c:	f8 94       	cli

0000019e <__stop_program>:
 19e:	ff cf       	rjmp	.-2      	; 0x19e <__stop_program>
